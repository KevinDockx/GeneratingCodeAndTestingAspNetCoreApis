/*
 * Library API
 *
 * Through this API you can access authors and their books.
 *
 * OpenAPI spec version: 1.0
 * Contact: kevin.dockx@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class AuthorsApiController : Controller
    { 
        /// <summary>
        /// Get an author by his/her id
        /// </summary>
        
        /// <param name="authorId">The id of the author you want to get</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="406">Not Acceptable</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/api/v1/authors/{authorId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAuthor")]
        [SwaggerResponse(statusCode: 200, type: typeof(Author), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        [SwaggerResponse(statusCode: 406, type: typeof(ProblemDetails), description: "Not Acceptable")]
        [SwaggerResponse(statusCode: 500, type: typeof(Void), description: "Server Error")]
        public virtual IActionResult GetAuthor([FromRoute][Required]Guid? authorId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Author));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 406 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(406, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Void));
            string exampleJson = null;
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Author>(exampleJson)
                        : default(Author);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a list of authors
        /// </summary>
        
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="406">Not Acceptable</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/api/v1/authors")]
        [ValidateModelState]
        [SwaggerOperation("GetAuthors")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Author>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 406, type: typeof(ProblemDetails), description: "Not Acceptable")]
        [SwaggerResponse(statusCode: 500, type: typeof(Void), description: "Server Error")]
        public virtual IActionResult GetAuthors()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Author>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 406 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(406, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Void));
            string exampleJson = null;
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Author>>(exampleJson)
                        : default(List<Author>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an author
        /// </summary>
        
        /// <param name="authorId">The id of the author to update</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="406">Not Acceptable</response>
        /// <response code="422">Validation error</response>
        /// <response code="500">Server Error</response>
        [HttpPut]
        [Route("/api/v1/authors/{authorId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateAuthor")]
        [SwaggerResponse(statusCode: 200, type: typeof(Author), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        [SwaggerResponse(statusCode: 406, type: typeof(ProblemDetails), description: "Not Acceptable")]
        [SwaggerResponse(statusCode: 422, type: typeof(ValidationProblemDetails), description: "Validation error")]
        [SwaggerResponse(statusCode: 500, type: typeof(Void), description: "Server Error")]
        public virtual IActionResult UpdateAuthor([FromRoute][Required]Guid? authorId, [FromBody]AuthorForUpdate body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Author));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 406 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(406, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ValidationProblemDetails));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Void));
            string exampleJson = null;
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Author>(exampleJson)
                        : default(Author);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Partially update an author
        /// </summary>
        /// <remarks>Sample request (this request updates the author&#x27;s **first name**)                              PATCH /authors/authorId              [                   {                      \&quot;op\&quot;: \&quot;replace\&quot;,                       \&quot;path\&quot;: \&quot;/firstname\&quot;,                       \&quot;value\&quot;: \&quot;new first name\&quot;                   }               ]</remarks>
        /// <param name="authorId">The id of the author you want to get</param>
        /// <param name="body"></param>
        /// <response code="200">Returns the updated author</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="406">Not Acceptable</response>
        /// <response code="422">Client Error</response>
        /// <response code="500">Server Error</response>
        [HttpPatch]
        [Route("/api/v1/authors/{authorId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateAuthor_0")]
        [SwaggerResponse(statusCode: 200, type: typeof(Author), description: "Returns the updated author")]
        [SwaggerResponse(statusCode: 400, type: typeof(ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        [SwaggerResponse(statusCode: 406, type: typeof(ProblemDetails), description: "Not Acceptable")]
        [SwaggerResponse(statusCode: 422, type: typeof(ValidationProblemDetails), description: "Client Error")]
        [SwaggerResponse(statusCode: 500, type: typeof(Void), description: "Server Error")]
        public virtual IActionResult UpdateAuthor_0([FromRoute][Required]Guid? authorId, [FromBody]List<Operation> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Author));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 406 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(406, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ValidationProblemDetails));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Void));
            string exampleJson = null;
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Author>(exampleJson)
                        : default(Author);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
